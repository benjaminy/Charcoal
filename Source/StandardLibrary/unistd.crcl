/*
 *
 */

#include <lib_utils.crclh>

extern "C" {

/* XXX */
void exit( int );

CRCL(ASYNC_CALL_STRUCT( sleep_, int seconds; int remaining; uv_timer_t timer; ) )

static void sleep_async_finish( uv_timer_t *timer )
{
    crcl(async_call_sleep_p) async = (crcl(async_call_sleep_p))timer->data;
    // zlog_debug( crcl(c), "SLEEP CALLBACK %d", cmd->_.sleep.seconds );
    async->remaining = 0; /* XXX for sure??? */
    wake_up_waiters( &async->waiters );
}

static void sleep_async_start(
    uv_loop_t *loop, uv_handle_t *handle, crcl(async_call_p) generic_async )
{
    crcl(async_call_sleep_p) async = (crcl(async_call_sleep_p))generic_async;
    int rc = uv_timer_start(
        &async->timer,
        sleep_async_finish,
        1000 * async->seconds,
        0 );
    /* TODO: better error handling */
    if( rc )
        exit( -1 );
}

}

unsigned int sleep( unsigned int seconds )
{
    crcl(async_call_sleep_t) async;

    int rc = uv_timer_init( crcl(evt_loop), &async.timer );
    /* TODO: better error handling */
    if( rc )
        exit( -1 );
    async.f          = sleep_async_start;
    async.seconds    = seconds;
    async.timer.data = &async;
    RET_IF_ERROR( crcl(send_async_call)( (crcl(async_call_p))&async ) );
    return async.remaining;
}

