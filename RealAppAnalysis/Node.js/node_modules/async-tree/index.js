'use strict';

if(!process.addAsyncListener)
    require('async-listener');

var tree = {};
var fs = require('fs');

var parentID = 0;
var callbackID = 0;
var callbacks = [];
var len = 0;
var runningCall = 0;
/**
 * AsyncListener object
 */
var AsyncListener = {};

AsyncListener.create = function create() {
    // This always gets called in between before/after
    callbackID += 1;

    //if(counter === 2) console.trace();
    callbacks.push( {"initiator": parentID, "ID": callbackID} );
    return callbackID;
};


AsyncListener.before = function before(context, callbackID) {
    parentID = callbackID;
};


AsyncListener.error = function error(tree, err) {
};

AsyncListener.after = function after(context, id){
}

var key = process.addAsyncListener(AsyncListener);

function printcallbacks(){
  console.log(callbacks);
}

function get_tree( callbacks ) {
  var tree = { 0:{} }
  get_tree_helper(callbacks, tree[0],  0 );
  return tree;
}

function get_tree_helper(callbacks, tree, prevParent ) {
    for (var j = 0; j < callbacks.length; j++){
      var callback = callbacks[j];
      if (prevParent === call.initiator){
        tree[callback.ID] = {}
        get_tree_helper(callbacks, tree[callback.ID], callback.ID);
      }
    }
}


function tree_to_dot_code(){
  var str = "digraph {\n";

  for (var i = 0; i < len; i++){
  	var callback = callbacks[i];
  	console.log(callback);
    var parent = callback.initiator;
    var child = callback.ID;
    str += parent + " -> " + child +"\n";
  }

  str += "}";

  return str;
}

function create_dot_file(){
  len = callbacks.length;
  var code = tree_to_dot_code() 
  fs.writeFileSync('dotgraph', code);
  console.log(code);
}

process.on('exit', create_dot_file);
module.exports = key;
