// Generated by CoffeeScript 1.7.1
(function() {
  var AsyncProfile, Polyfills, Result,
    __slice = [].slice;

  Result = require('./result');

  Polyfills = require('./polyfill');

  AsyncProfile = (function() {
    AsyncProfile.active = [];

    function AsyncProfile(opts) {
      this.callback = (opts != null ? opts.callback : void 0) || function(result) {
        return result.print();
      };
      this.fast = (opts != null ? opts.fast : void 0) || false;
      this.awaiting = 0;
      this.ticks = [];
      this.tick = null;
      this.start = null;
      this.end = null;
      AsyncProfile.active.push(this);
      this.listener = process.addAsyncListener((function(_this) {
        return function() {
          return _this.create();
        };
      })(this), {
        before: (function(_this) {
          return function(_, tick) {
            return _this.before(tick);
          };
        })(this),
        after: (function(_this) {
          return function(_, tick) {
            return _this.after(tick);
          };
        })(this),
        error: (function(_this) {
          return function(tick, err) {
            return _this.after(tick);
          };
        })(this)
      });
    }

    AsyncProfile.prototype.create = function() {
      var overhead, tick;
      if (this.end) {
        return;
      }
      overhead = this.tick && !this.fast ? process.hrtime() : void 0;
      this.awaiting += 1;
      tick = {
        queue: process.hrtime(),
        parent: this.tick,
        overhead: [0, 0]
      };
      this.start || (this.start = tick.queue);
      if (!this.fast) {
        tick.stack = this.stack();
      }
      this.ticks.push(tick);
      if (overhead) {
        overhead = process.hrtime(overhead);
        this.tick.overhead[0] += overhead[0];
        this.tick.overhead[1] += overhead[1];
      }
      return tick;
    };

    AsyncProfile.prototype.before = function(tick) {
      if (this.end) {
        return;
      }
      this.awaiting -= 1;
      tick.previous = this.tick;
      this.tick = tick;
      return this.tick.start = process.hrtime();
    };

    AsyncProfile.prototype.after = function(tick) {
      var previous, _base;
      if (this.end) {
        return;
      }
      (_base = this.tick).end || (_base.end = process.hrtime());
      if (this.awaiting === 0) {
        this.stop();
      }
      previous = this.tick.previous;
      this.tick.previous = null;
      return this.tick = previous;
    };

    AsyncProfile.prototype.stack = function() {
      var err, orig, stack;
      orig = Error.prepareStackTrace;
      Error.prepareStackTrace = function(_, stack) {
        return stack;
      };
      err = new Error();
      Error.captureStackTrace(err, arguments.callee);
      stack = err.stack;
      Error.prepareStackTrace = orig;
      return err.stack;
    };

    AsyncProfile.prototype.mark = function(context) {
      if (this.tick) {
        return this.tick.mark = context;
      }
    };

    AsyncProfile.prototype.stop = function() {
      var i, _base, _ref;
      if (this.end) {
        return;
      }
      if (this.tick) {
        (_base = this.tick).end || (_base.end = process.hrtime());
      }
      this.end = ((_ref = this.tick) != null ? _ref.end : void 0) || process.hrtime();
      process.removeAsyncListener(this.listener);
      i = AsyncProfile.active.indexOf(this);
      AsyncProfile.active.splice(i, 1);
      return process.nextTick((function(_this) {
        return function() {
          return _this.callback(new Result(_this));
        };
      })(this));
    };

    AsyncProfile.profile = function() {
      var args, fn;
      fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return process.nextTick(function() {
        (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(AsyncProfile, args, function(){});
        return process.nextTick(fn);
      });
    };

    AsyncProfile.mark = function(context) {
      var profile, _i, _len, _ref, _results;
      _ref = AsyncProfile.active;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        profile = _ref[_i];
        _results.push(profile.mark(context));
      }
      return _results;
    };

    AsyncProfile.stop = function(context) {
      var profile, _i, _len, _ref, _results;
      _ref = AsyncProfile.active;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        profile = _ref[_i];
        _results.push(profile.stop(context));
      }
      return _results;
    };

    return AsyncProfile;

  })();

  module.exports = AsyncProfile;

}).call(this);
