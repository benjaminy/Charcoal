'use strict';

if(!process.addAsyncListener)
    require('async-listener');

var stack = require('./lib/stack');


Error.stackTraceLimit = Infinity;

var current_parent = 0;
var counter = 0;
var calls = [];

/**
 * AsyncListener object
 */
var AsyncListener = {};


function call(current_parent, current) {
    this.current_parent = current_parent;
    this.current = current;
}


AsyncListener.create = function create() {
    // This always gets called in between before/after
    counter += 1;

    calls.push( new call(current_parent, counter) );
    return counter;
};


AsyncListener.before = function before(context, stack) {
    current_parent = stack;
};


AsyncListener.after = function after() {
    //current_parent = 0;
};


AsyncListener.error = function error(stack, err) {
};


var key = process.addAsyncListener(AsyncListener);

function printCounter(){
  console.log(counter);}

function printCalls(){
  console.log(calls);}

//setTimeout(printCalls, 3000)
process.on('exit', printCalls);

module.exports = key;
