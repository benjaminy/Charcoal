'use strict';

if(!process.addAsyncListener)
    require('async-listener');

var stack = require('./lib/stack');


Error.stackTraceLimit = Infinity;

var parent = 0;
var counter = 0;
var calls = [];

/**
 * AsyncListener object
 */
var AsyncListener = {};


function call(parent, current) {
    this.parent = parent;
    this.current = current;
}


AsyncListener.create = function create() {
    // This always gets called in between before/after
    counter += 1;

    //calls.push( new call(parent, counter) );
    calls.push( {"parent":parent, "current":counter } );

    return counter;
};


AsyncListener.before = function before(context, stack) {
    parent = stack;
};


AsyncListener.after = function after() {
    //parent = 0;
};


AsyncListener.error = function error(stack, err) {
};


var key = process.addAsyncListener(AsyncListener);


/*

  call { current_parent: 0, current: 1, ts: 1500494564725 },
  call { current_parent: 0, current: 2, ts: 1500494564725 },

  call { current_parent: 1, current: 5, ts: 1500494564736 },
  call { current_parent: 2, current: 3, ts: 1500494564729 },

  call { current_parent: 3, current: 4, ts: 1500494564730 },

  call { current_parent: 4, current: 7, ts: 1500494564741 },

  call { current_parent: 5, current: 6, ts: 1500494564737 },

  call { current_parent: 6, current: 8, ts: 1500494564749 },
  call { current_parent: 7, current: 9, ts: 1500494564846 },
  call { current_parent: 8, current: 10, ts: 1500494564849 },
  call { current_parent: 9, current: 11, ts: 1500494564859 },
  call { current_parent: 10, current: 12, ts: 1500494564860 },
  call { current_parent: 11, current: 13, ts: 1500494564968 },
  call { current_parent: 12, current: 14, ts: 1500494564969 } ]

*/

function printCounter(){
  console.log(counter);}

function printCalls(){
  console.log(calls);}

function getTree( calls ) {
  console.log("tree");
  var tree = { 0:{} }
  helper( calls, tree[0],  0 );
  console.log(tree[0][1][5]);
  return tree;
}

/*function printTree(){
  printSubtree( getTree(calls) );
}

function forEach(arr, func){
  for(var i = 0, i < arr.length, i++){
    func(arr[i]);
  }
}
function printSubtree(subtree) {
  forEach(subtree.keys(), console.log);




}*/

function printTree() {
  var tree = getTree(calls);
  printSubtree(tree, 0);
}

function printSubtree(tree, indent){
  var keys = Object.keys(tree);
  console.log("new level");
  for(var i = 0; i < keys.length; i++){
    console.log(keys[i]);
    printSubtree(tree[ keys[i] ], indent+1);
  }
}


function helper(calls, tree, prevParent ) {
    for (var j = 0; j < calls.length; j++){
      call = calls[j];
      if (prevParent === call.parent ){
        ///console.log(call);
        tree[call.current] = {}
        helper(calls, tree[call.current], call.current );
      }
    }

}

process.on('exit', printTree);
process.on('exit', printCalls);


module.exports = key;
