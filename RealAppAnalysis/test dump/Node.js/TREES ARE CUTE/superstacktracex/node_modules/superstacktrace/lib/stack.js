'use strict';




/*

getTree(calls)

helper( calls, {0:{}}, [0] )


{ 0: {1:{}, 2:{}} }
new_recent_parents = [1, 2]

helper( calls, {1:{}, 2:{}}, [1,2] )



  call { current_parent: 0, current: 1, ts: 1500500599875 },
  call { current_parent: 0, current: 2, ts: 1500500599876 },
  call { current_parent: 1, current: 5, ts: 1500494564736 },
  call { current_parent: 2, current: 3, ts: 1500494564729 },

  call { current_parent: 3, current: 4, ts: 1500494564730 },

  call { current_parent: 4, current: 7, ts: 1500494564741 },

  call { current_parent: 5, current: 6, ts: 1500494564737 },

  call { current_parent: 6, current: 8, ts: 1500494564749 },
  call { current_parent: 7, current: 9, ts: 1500494564846 },
  call { current_parent: 8, current: 10, ts: 1500494564849 },
  call { current_parent: 9, current: 11, ts: 1500494564859 },
  call { current_parent: 10, current: 12, ts: 1500494564860 },
  call { current_parent: 11, current: 13, ts: 1500494564968 },
  call { current_parent: 12, current: 14, ts: 1500494564969 } ]

*/



var proto = {};


proto.init = function init(stack, parent) {
    this.stack = stack;
    this.parent = parent;
    return this;
};


proto.getStacks = function getStacks() {
    var stacks = [this.stack];
    var parent = this.parent;

    while (parent) {
        stacks.push(parent.stack);
        parent = parent.parent;
    }

    return stacks;
};


function stackFactory(stack, parent) {
    return Object.create(proto).init(stack, parent);
}


module.exports = stackFactory;
module.exports.stack = proto;
