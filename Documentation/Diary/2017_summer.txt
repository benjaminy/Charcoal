[August 4]
  - GOALS: Continue with monkey-patching, chromium, and bug reports

[Miguel - August 3]
  - Chromium
    - Building is STILL not done, but it seems that I gotten farther in the build process
      using the toolchain for Windows' than I did with that for Linux. 
  - Bug reports
    1. Another interesting read: https://www.artemis-emc2.eu/fileadmin/user_upload/Publications/2016_EMC2_Summit_Wien/15RCiancariniPoggiRossiSillittiConcurrencyBugs.pdf
	2. Considering looking into web reports due to unsatisfying results from GitHub

[August 3]
  - GOALS: Continue with monkey-patching, chromium, and bug reports
  
[Clara - August 2]
Continue w monkey-patching
    More testing:
    - Array.forEach works - however, it'd be cool to get it working for all objects implenting the DOMTokenList interface
    - some instances of addEventListener works - however, mysteriosuly, only when I modified the code and not use the 'forEach' function on list
    containing the objects on which addEventListener is called.

  It is rather clear that it becomes a very non-elegant and ad hoc way of getting the parent-child relationships of callbacks,
  and in order to get it to work properly we'd have to go in and add all applicable API calls manually, unless
  (writing a script that does this for us).

  Started to work on a Chrome extension, which will make the 'long-stack-traces' run in the browser.

Also, created a file /RealAppAnalysis/interesting_bugreports.txt, in which we will include interesting
bug reports that we come across.

[Miguel - August 2]
  - Continuing with Chromium
  	1. Seems that I resolved yesterday's obstacles to building Chromium... but still trying to build it.
  	   - In using the toolchain for Windows
  	     a. Errors on checking out the src code. Great.
  	     b. Cannot think of alternative building methods.
    2. On the flip side, the chromium project's navigation tool (https://cs.chromium.org/)
       is incredibly useful:
      - Located several of the important classes involved with the async stack trace
      - Got an intuition for how chromium starts the debugger.
    3. In addition, learning c++
  - Poking around the bug reports still
    1. So far, nothing suggestive of programmers thinking some API is atmoic when it's really
       not
    2. For that, I imagine looking for issues without any preconceptions on its cause may be
       fruitful
    3. I will be building a list of some seemingly noteworthy issues, anyhow.

[August 2]
  - GOALS: Continue with monkey-patching, chromium, and bug reports

[Clara - August 1]
  Update on monkey patching and "long-stack-traces":
  - with a few modification, the script works for some trivial test cases.
      -- changed wrapRegistrationFunction(window.constructor.prototype, "setTimeout", 0); into
          wrapRegistrationFunction(window, "setTimeout", 0), which is the less general form.
          Why the other version doesn't work is not clear.
  - the causality is succesfully recorded for setTimeout, setInterval and getCurrentPosition (geolocation)
  - up next:
      1. additional testing and trying to include different api calls.
      2. try to inject code in real web applications through chrome extensions


[Miguel - August 1]
  - Continued working on building chrome
    1. Several issues:
       - Source code downloads fine
       - Server errors when trying to use the build system
  - Until then, looking at bug reports.
    1. Interesting read: https://ps.ipd.kit.edu/downloads/ka_2013_mining_concurrency.pdf
    2. It may be worth while to look at gitHub API, which seems to be able to provide the information
       we need

[August 1]
  - GOALS:
    1. Continuing with the "long shots" projects for getting more
       detailed information about the async behavior of web applications

    2. Looking at bug reports

[Clara - July 31]
Decided to look into monkey patching, "long-stack-traces"
There are two challenges as to making this do anything useful for us:
  1. include, not only the basic async functions (setTimeout, setInterval), but (in theory) every possible
  async API call. This shouldn't be impossible (but potentially rather tedious).
  The information retrieved from web scraping the Mozilla API page would come handy.
  2. assuming we have a fully functional script which logs sufficently many async calls,
  the next (bigger) challenge is to inject this code in the browser. I would some as if
  it's simply a matter of modifying the js code through the developer tool, however, not sure
  it'd be that easy...
However, the problem as of now is that the script as it currently is doesn't work at all.
  - prototyping doesn't work as expected

[Miguel - July 31]
  - Decided to look into chrome. I would like to see if there is some way
    to modify the event loop to get us more detailed information about
    the asynchronous behavior of a web application.

[July 31]
  - On July 27's meeting, it was decided that we should...
     1. Ask whether the event loops for Electron's Main and Renderer processes are different
        in terms of async hooks / wrap

     2.Attempt some long shots
       - Wrap functions in events Chrome asyc stack api --- "Long stack traces"
       - Look at Chrome's source code and see if there is a feasible way to
         modify the event loop

     3. Looking at bug reports

Bug databases
[Miguel - July 27]
   - Pessimistic about using Node.js to get async profiles from Ionic apps
   - Will be looking at Electron again to see if its possible to use async-wrap / hooks again...

[Miguel & Clara - July 27]
   1. Have Ionic run with recent version of Node.
      - Ionic is running with Node.js v8.2.1, which supports async-hooks

   2. Create a simple Ionic app and successfully import async-hooks and run async-tree on
      application (which uses async-hooks and not async-listener)
      - Concerning: https://forum.ionicframework.com/t/nodejs-library-within-ionic-2/53727
      - An Ionic2 app at runtime does not use node.js?
     	 a. Ionic apps do not contain the process global object
     	 b. This is bad since async-wrap and consequently async-hooks depend on
     	    process...

[Miguel & Clara - July 25]
  1. Try to integrate and use the more refined version of async-listener, i.e. async-hooks. Hopefully in this
     module setImmediate and setTimeout are not messed with
       - Implementing async-hooks was successful

  - Since other async calls trees are properly recorded when async-tree is required in main.js
    it appears that the main process is properly recorded after all.
  - When it comes to the recording the renderer processes, the following was concluded yesterday:
    1. There is no way to generally determining what code runs in the renderer processes, and messing
       with the C++ is out of question.

    2. What we hope instead is to, upon instantiation of every "BrowserWindow", somehow inject the require statement.

[July 24]
- GOALS
  1. Create a simple electron app, and inject the async-tree sucessfully, such that we gets
  the actions from not only the main process, but also the renderer process.

    How can we include the async-tree module in the renderer process?

    "The main process creates web pages by creating BrowserWindow instances.
    Each BrowserWindow instance runs the web page in its own renderer process.
    When a BrowserWindow instance is destroyed, the corresponding renderer process is also terminated."
    https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md

    Approach 1:
    Can we modify the following modules?
    ...
    require('app')
    require('browser-window')
    require('electron')
    ...

    Problem a) they come as binaries it appears.
    Problem b) they are all written in C++?!
    https://github.com/electron/electron/tree/master/atom

    Approach 2:
    Can ipcMain, ipcRenderer be used to record async events in the renderer processes?

[July 21]
 - GOALS
   1. Inject code into Atom or other electron application
   2. Enhance the async-tree module to include names and (ACCURATE) start / end
      times.

[Clara and Miguel - July 19-20]
  - We got the tree to working and got dot to draw the results.
  - We also included timestamps with the function calls, but there
    is a grave logical error regarding how to keep track of
    the current running callback...
  - Names appear to be non-trivial to get, however...

[Miguel - July 18]
  - I tinkered with tree.js, but I could not get it to produce something useful
  - Decided to look for other means to get analytical information about javascript
    programs through Node.js...
  - Found out there is not a whole lot of developing tools in terms
    of profiling JS code supporting Node's libraries...
  - (!) With Ben's confirmation, developing our own
    module using process.addAsyncListener to produce an async tree
    ourselves seems feasible...

[Clara - July 18]
Continue testing the async tracing tools in the npm library.
If none of them works exactly how we want it (which is quite likely), then also try to get a better understanding
of the inner works of these tools in order to see how we can modify them to suit our needs. These ideas should be discussed w mr.Ben.

[Clara - July 17]
		- Read the paper "Race Detection for Web Applications"
		- Look into Node.js and the async-listener tool.
		- Several tools for getting the tree of callback chain were found, all of which more of less built off of the async-listener module.
    - However, not yet clear how useful, or reliable, they are, and whether they give us what we want.

		0. (async-listener) --unclear to what extent this module is compatible with the more recent versions of Node
		  1 stackup --VERY confusing. Not only does our own test scripts not work with this module -- the designers own test file gives questionable output
		  2 async stacktrace -- This one is also confusing... it appears as if the test code needs to include some certain commands and special syntax for it use the module properly.
														The module has significant popularity so it's possible that it's good and useful though I don't have enough understanding of js to see how and why.
		  3 async-profile --Can track init functions, however, unclear if it works for nested callbacks. Infrastructural changes would be required.
		  4 asynctrace --Appears to be working. However, unclear to what extent it works with more elaborate test scripts.
		  5 superstacktrace  --Works basically the same as 'asynctrace'
		  6 tree

[Miguel - July 17]
  - Got the async-listener installed for testing
  - Was able to verify that async-listener does listen for async things (it works)
  - Tested some of modules built on the async-listener
    1. Asynctrace
    2. Async-Profile
    3. Async Tree

  - I have not gotten them to work practically, and I suspect if they can't really give
    the chain of callbacks that we need.
  - Still hopeful about the tree...

[Clara and Miguel - July 14]
  - Clean up, debugged and refined the web scraper.

[Miguel - July 13]
  - (w/ Clara) We were able to request HTML docs from Mozilla's servers and
    parse them for relevant links to their web APIs.
  - Although, various edge cases regarding the presence and absence of certain
    HTML tags have to be addressed
  - Seems I was able to create a rough approximation for the Mozilla's doc;
    got the potential API calls

[Clara - July 13]
  - Scraping the web page with all of the web APIs. Our goal is to create a
    list with all APIs, or functioncalls, that have a callback and/or promise.
  - For starters, we are gonna look for Python libraries that allow us to
    download/parse the web page.

[BIY - July 12]
A good paper for discussion:
http://cs.coloradocollege.edu/~bylvisaker/p251-petrov.pdf

[Miguel - July 11]
  - (w/ Clara) There we disagreements between the clusters I found and the clusters Clara found,
    but we eventually came to fix both our scripts and got identical results
  - More investigations into identifying API calls in the profile

[Miguel - July 10]
  - (!) (w/ Clara) Developed a first approach to identifying clusters on the profiles
  - ( w/ Clara ) We attempted to find ways to determining Web API calls through the the profiles,
    but nothing of practical use...
  - Finally got a hacked reduction feature to be implemented with the datamapper. Stoked.

[Miguel - July 7]
  - I began to modulize the my graphing scripts, separating details of the input data away
    from the code
  - This way, the graphing scripts can receive any arbitrary set of data
  - Also, refactored some of my code so that the datamapper can be used to find clusters
    across all profilers

[Miguel - July 5]
  - Decided to format some of the data analysis scripts and clean up some of the scripts
  - I am preparing to do a map over the data, and somehow reduce the results to something
    that can be used to inform us on identifying clusters
  - Refined / adapt some of the present scripts, since they provide useful information about
    the data

[Miguel - July 4]
  - I was able to develop a data mapper, a script that applies an input script over all files in
    specified directory
  - My hope is that it will be useful in simplifying data analysis and conversions, as well as
    formatting of data.
  - My scripts require some adapting to the interface of the data mapper, but mainly this is
    accommodating command line arguments on a per script basis.
  - This is beneficial, since I would no longer have to edit the scripts to apply them to a file

[Miguel - July 3]
  - The agreements between the CPU Profile and the Event Tracer were investigated
  	1. Both seem to not overlap too much, when looking at the differences between what
  	   functions are found in both
  	2. The functions found in the CPU Profiler tend to be majorly low-order functions
  	3. Functions found only in the event tracer really are mostly found in the same process / thread
  	   as the functions found in the CPU profiler
  - It may be reasonable to assume that, for now, the process and thread that the CPU Profiler
    is mapped to is a reasonably place to get data from so that we can automate the
    process

[Miguel - June 29]
  - GOALS:
  	1. Understand what sort of agreements in data there are between the CPU Profile and the event profile
  	2. Determine which of the two, if no agreement is found, is more reliable
  	3. Investigate whether the durations of function events are truly represented by the event profile
  		- I have a suspicion that the CPU Profile is where function events are represented in 0.1 MS resolution...

[Miguel - June 28]
  - Refining how to identify process-of-interest automatically is not achieved
  - (!) That said, in this process, it was found that:
  	1. Each data file has a cpuprofile associated with it, which is tailored to profiling JavaScript behavior
  	2. Every process and their threads has metadata associated with it, which can be used if trends exist in which thread scripting
  	   events occur (the descriptors for the metadata is consistent across data files)
  - By mapping the CPU Profile to the FunctionCall events in the data file, it is possible to identify processes of interest
    but there is no clear 1:1 relationship between the CPU Profile and FunctionCall events
  - Effort is being made in creating the bridge between the two data subsets so that a more robust process-of-interest
    algorithm is achieved

[Miguel - June 27]
  - Fixed the main concern with the graph, but the x-axes does not represent functions of 0 duration
  - In doing so, created a script that can serve as a starting point to find "clusters" of functions by
    identifying gaps between function calls

[Miguel - June 26]
  - I performed some fixing and cleaning on the scripts
  - There is a particular concern with the data
  	1. The cumulative duration calls do not sum up to the total runtime of functions
  	2. In effect, the cumulative percentages of function durations to total function runtime does not converge to 1.

[Miguel - June 25]
  - Started to modulize the scripts, but more refinements have to be made with them, particular the data analysis
  - More cleaning, to accommodate Clara's involvement in the project
  - (!?) Added a simple guessing algorithm for finding the pids of processes of interest
    - It seems the case that the process of interest do on average have an extraordinary # of function calls
    - Does not work for ALL profiles, and sometimes may pick up rendering processes...

[BY - June 26]
A couple relevant papers for the project.
- A student of Ben's senior project from last year.  Blake looked at similar
  questions to what we're dealing with in the context of multi-threaded apps
http://cs.coloradocollege.edu/~bylvisaker/Blake_Jackson_Capstone.pdf

- An interesting publication on concurrency errors in JavaScript.  We should
  probably do a group discussion of this one at some point.
http://cs.coloradocollege.edu/~bylvisaker/p381-mutlu.pdf

- Ben's work that is the motivation for this whole thing:
http://charcoal-lang.org/charcoal_intro_draft.pdf

[Miguel - June 24]
  - Started to clean up the scripts / directions
  - The focus, by Ben's suggestion, will be to start looking for gaps between callbacks / events
  - Also, the idea of representative samples is still a concern, and a protocol for how to go about
    getting profiles may have to be addressed concretely soon

[Miguel - June 23]
  - I gathered some more sample performance profiles, but I am growing concerned with whether the profiles are representative of
    JavaScript behavior of the sites from which they were derived
  - (!) Automation of profile analysis / graphing is looking a bit promising, as I think there is a structural pattern in what processes
    are of interest

[Miguel - June 22]
  - I implemented some scripts for graphing data
  - It's a little rough looking, and the script is beginning to become a bit messy, but I believe it has working value
  - I am suspecting that I will have to automate the process of looking at data eventually, and I wonder what sort
    of statistical analysis can be performed en masse

[Miguel - June 20]
 - (!) After consulting with Ben, it was determined that there may be a arguably straightforward way of extracting
   function duration data from Chrome's Performance Analyzer
 - For the sake of progress, I will assume his approach correct, but I will eventually "modulize" data extraction
 - Also, it was also decided that deriving causality in async activity may not be totally necessary, although
   I will keep it in mind

[Miguel - June 19]
 - Looked at Firefox developer tools a bit more intently to see if there are cleaner output files for
   determining function duration
 - Mozilla's performance analyzer does not yield intuitive, interpretable results
 - (?) There's an async parent attribute for Firefox's analyzer; simple overlapping asyc call tests suggest
       that it can't be used for causal relationships...

[Miguel - June 16]
 - Output files of chrome's performance analyzer and the JavaScript Profiler is more cumbersome than I thought
 - On top of that, both tools rely on sampling to gain runtime information of functions
 - I am considering dabbling with the other browser dev-tools in hopes of cleaner output files

[Miguel - June 15]
 - I followed Ben's suggestion to look at the async listener, and skimmed the code.
 - Seems quite promising, if I understood the AsyncListener implementation well enough (separate from the tree)
 - Will follow up on the AsyncListner implementation, as well as the Node.js native api for async handling and
   process handling... still having issues with data gathering.

 [BY - June 14]
- Feeling pessimistic about getting event initiator/source from browsers.
- However, it might be available in node.js: https://gist.github.com/creationix/7796338

[Miguel - June 14]
 - The output file of the current profilers / tracers do not format function time in an obvious way
   (there's no attribute like "duration")
 - I have some leads but nothing solid on how to derive this data

[Miguel - June 13]
 - I decided to focus on the output of the performance analyzer. It is arguably more
   descriptive in profiling an application during runtime.
 - However, causal relationships are not mapped in the profiler, outside of timeouts
 - There is reason to suppose that Chrome does, at the very least, can keep track of asynchronous activity because
   it does so through a stack trace.

[Miguel - June 12]
 - Several findings with the inspector
 	- A JavaScript profiler: Handles specifically functional calls during the runtime of an application in Chrome
 	- Performance analyzer receives runtime information with a trace of all named function calls, as well as events
 - Creating scripts that work with the JS Profiler, the Performance Analyzer, and the Event Trace seems to be needed in order
   to greater understand causality relationships in a profile.
 - In this, it is questionable whether analysis should occur in the scripts or in external applications.
 - (!) It may be possible to use the performance analyzer to derive event/callback relationships, but the
    output file is dense...

[Miguel - June 9]
 - Focus has been given to doing some basic data analysis
 - My datautil module will be a dump file for any tools needed to process profiles
 - So far, trying to manipulate the output data for Event Profiler tool in a GENERIC way is a bit harder than expected,
   and I do not want to ad-hoc the process in case I find other tools to supplement the output data.
 - Looking for other tools are still on-going.

[Miguel - June  7]
 - I learned a working amount of Python to make scripts that can read from JSON files and manipulate them
 - I am developing a set of utility functions to manipulate the data from the Chrome Event Profiler
 - I will make more effort into understanding several key questions that I have:
 	1. How would the theoretical concurrency bug that can result from series of call backs look like in the profiler?
 	2. What other processes that the Event Profiler traces that could contribute to concurrency concerns
 	   beyond the v8 category?
 - To begin to answer these questions, I will look into other tools beyond just the Chrome developer
   tools to see if there is some way to provide more information about events.

[Miguel - June 2]

 - Looked into the inspector tool and made several observations. Of them, the several are important:
	1. It is possible to stop the execution of a program and still have the Chrome Event Profiler run
	2. The profiler will show when events/functions calls has not finished when a trace ends
 - Also, another thing passively observed: the Profiler will trace events across all tabs, not just 'opened' ones.

[Miguel - June 1]
 - Progress was made in identifying callbacks using simple test JavaScript programs.
 - Using event categories v8 and v8.execute (credit to Ben), I was able to see how the event tracer profiles callbacks. Namely, in
   the case of setTimeout(), it appears as ScheduleAction::execute; profiles of callbacks outside of functions such as setTimeout()
   seem to appear as sequences of events, instead of stacks of functions, but I find this odd and will continue to look at this.
 - Also, I will look into how to use the event tracer with other developer tools, mainly the inspector, to achieve greater control
   over the execution of a program.

[Miguel - May 31]
 - Progress was made in understanding a trace profile
 - There are obstacles in extracting wanted data
    1. There are a lot of events being traced irrelevant to our purposes
    2. Lack of definition in function calls
 - Effort will be made in identifying useful data by tracing simple JavaScript / HTML programs. This will help me understand what
   to look for in a event trace of a complex application

[BY - May 24]
Background for the summer project with Clara & Miguel:
- Very broad, old-ish background on the challenges of concurrency:
  - https://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf
  - https://people.eecs.berkeley.edu/~brewer/papers/threads-hotos-2003.pdf
- More recent references TBD
- What I am expecting us to do:
  - Instrument JS ecosystems (browsers, node, electron, others?)
  - Collect traces of event callbacks from real applications
  - Analyze these traces for potentially problematic patterns
- What I am hoping/expecting to find:
  - Many applications are composed of tons of extremely short callbacks.
    Sometimes there are chains of callbacks that typically execute in short succession.
    If some other action happened in the middle of such a chain, it could cause a concurrency bug.

First steps:
- Gain familiarity with JavaScript event logging/tracing tools. For example (these are just starting points):
  - https://developers.google.com/web/tools/chrome-devtools/console/events
  - https://nodejs.org/api/tracing.html
