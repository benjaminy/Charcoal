[BY - May 24]
Background for the summer project with Clara & Miguel:
- Very broad, old-ish background on the challenges of concurrency:
  - https://web.stanford.edu/~ouster/cgi-bin/papers/threads.pdf
  - https://people.eecs.berkeley.edu/~brewer/papers/threads-hotos-2003.pdf
- More recent references TBD
- What I am expecting us to do:
  - Instrument JS ecosystems (browsers, node, electron, others?)
  - Collect traces of event callbacks from real applications
  - Analyze these traces for potentially problematic patterns
- What I am hoping/expecting to find:
  - Many applications are composed of tons of extremely short callbacks.
    Sometimes there are chains of callbacks that typically execute in short succession.
    If some other action happened in the middle of such a chain, it could cause a concurrency bug.

First steps:
- Gain familiarity with JavaScript event logging/tracing tools. For example (these are just starting points):
  - https://developers.google.com/web/tools/chrome-devtools/console/events
  - https://nodejs.org/api/tracing.html

May 31: Miguel
 - Progress was made in understanding a trace profile
 - There are obstacles in extracting wanted data
    1. There are a lot of events being traced irrelevant to our purposes
    2. Lack of definition in function calls
 - Effort will be made in identifying useful data by tracing simple JavaScript / HTML programs. This will help me understand what    
   to look for in a event trace of a complex application.
